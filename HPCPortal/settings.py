"""
Django settings for HPCPortal project.

Generated by 'django-admin startproject' using Django 3.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/3.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/3.0/ref/settings/
"""
import json
import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
from datetime import timedelta

BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

config_file_path = os.path.join(BASE_DIR, 'HPCPortal/config.json')
config = open(config_file_path, )
data = json.load(config)

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/3.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = data['secret_key'][0]["SECRET_KEY"]

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['127.0.0.1']

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'mainapp.apps.MainappConfig',
    'django.contrib.humanize',
    'pardakht',
    'kronos',
    'axes',
    'django_log_to_telegram',
]

AUTHENTICATION_BACKENDS = [
    'axes.backends.AxesBackend',
    'django.contrib.auth.backends.ModelBackend',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'axes.middleware.AxesMiddleware',
]

ROOT_URLCONF = 'HPCPortal.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'HPCPortal.wsgi.application'

# Database
# https://docs.djangoproject.com/en/3.0/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': data['db_details'][0]["NAME"],
        'USER': data['db_details'][0]["USER"],
        'PASSWORD': data['db_details'][0]["PASSWORD"],
        'HOST': 'localhost',
    }
}

# Password validation
# https://docs.djangoproject.com/en/3.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# logging configs
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'filters': {
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse'
        }
    },
    'handlers': {
        'telegram_log': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django_log_to_telegram.log.AdminTelegramHandler',
            'bot_token': data['telegram_logger_bot'][0]["API_TOKEN"],
        }
    },
    'loggers': {
        'django.request': {
            'handlers': ['telegram_log'],
            'level': 'ERROR',
            'propagate': True,
        },
    },
}

# Internationalization
# https://docs.djangoproject.com/en/3.0/topics/i18n/

LANGUAGE_CODE = 'fa-ir'

TIME_ZONE = 'Asia/Tehran'

USE_I18N = True

USE_L10N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/3.0/howto/static-files/

MEDIA_ROOT = os.path.join(BASE_DIR, 'media/')
MEDIA_URL = '/media/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATIC_URL = '/static/'

GOOGLE_RECAPTCHA_SECRET_KEY = data['recaptcha'][0]["GOOGLE_RECAPTCHA_SECRET_KEY"]
X_FRAME_OPTIONS = 'SAMEORIGIN'

SILENCED_SYSTEM_CHECKS = ['mysql.E001']  # to ignore mysql db error
SAMAN_MERCHANT_ID = data['pardakht_saman'][0]["SAMAN_MERCHANT_ID"]
LOGIN_URL = '/login'

# EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_HOST = 'mail.scu.ac.ir'  # BUGGGGGG : CANT CONNECT TO SMTP SERVER
EMAIL_PORT = 465
EMAIL_HOST_USER = data['webmail'][0]["USER"]
EMAIL_HOST_PASSWORD = data['webmail'][0]["PASSWORD"]
EMAIL_USE_TLS = True
# DEFAULT_FROM_EMAIL = 'ایمیل تست از طرف پرتال <noreply@example.com>'  uncomment to change email title
SESSION_EXPIRE_AT_BROWSER_CLOSE = True
AXES_FAILURE_LIMIT = 5
AXES_COOLOFF_TIME = timedelta(minutes=30)

LOG_TO_TELEGRAM_BOT_TOKEN = data['telegram_logger_bot'][0]["API_TOKEN"]

# SECURITY SETTING
# CSRF_COOKIE_SECURE = True  # to avoid transmitting the CSRF cookie over HTTP accidentally.
# SESSION_COOKIE_SECURE = True  # to avoid transmitting the session cookie over HTTP accidentally.
# SECURE_BROWSER_XSS_FILTER = True  # the browser will prevent rendering of the page if an XSS attack is detected
# SECURE_CONTENT_TYPE_NOSNIFF = True  # the browser will prevent rendering of the page if an XSS attack is detected
# SECURE_SSL_REDIRECT = True  # force Django redirect all non-HTTPS requests to HTTPS
# """ browsers will refuse to connect to your site for the given time period if you’re not properly serving ...
# HTTPS resources, or if your certificate expires"""
# SECURE_HSTS_SECONDS = 1800  # 30 min
# SECURE_HSTS_INCLUDE_SUBDOMAINS = True
# SECURE_HSTS_PRELOAD = True
config.close()  # closing config file
